{"ast":null,"code":"var _jsxFileName = \"/Users/hasaniqbal/Desktop/React_Chat/react_chat/src/contexts/ConversationsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversations,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}","map":{"version":3,"sources":["/Users/hasaniqbal/Desktop/React_Chat/react_chat/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, {useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n    const { contacts } = useContacts()\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages:[] }]\n        })\n    }\n\n    function addMessageToConversation({ recipients, text, sender }) {\n        setConversations(prevConversations => {\n            let madeChange = false\n            const newMessage = { sender, text }\n            const newConversations = prevConversations.map(conversation => {\n                if (arrayEquality(conversation.recipients, recipients)){\n                    madeChange = true\n                    return {\n                        ...conversations,\n                        messages: [...conversation.messages, newMessage]\n                    }\n                }\n\n                return conversation\n            })\n\n            if (madeChange) {\n                return newConversations\n            } else {\n                return [...prevConversations,\n                    { recipients, messages: [newMessage] }]\n            }\n        })\n    }\n\n    function sendMessage(recipients, text) {\n        addMessageToConversation({recipients, text, id})\n    }\n\n    const formattedConversations = conversations.map((conversation, index) => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id===recipient\n            })\n            const name = (contact && contact.name) || recipient\n            return {id:recipient, name}\n        })\n        \n        const messages = conversation.messages.map(message => {\n            const contact = contacts.find(contact => {\n                return contact.id === message.sender\n            })\n            const name = (contact && contact.name) || message.sender\n            const fromMe = id===message.sender\n            return { ...message, senderName: name, fromMe }\n        })\n\n        const selected = index===selectedConversationIndex\n        return { ...conversation, messages, recipients, selected }\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation\n    }\n\n    return (\n        <ConversationsContext.Provider value = {value}>\n            {children} \n        </ConversationsContext.Provider>\n    )\n}\n\nfunction arrayEquality(a, b) {\n    if (a.length !== b.length) return false\n\n    a.sort()\n    b.sort()\n\n    return a.every((element, index) => {\n        return element === b[index]\n    })\n}\n"]},"metadata":{},"sourceType":"module"}