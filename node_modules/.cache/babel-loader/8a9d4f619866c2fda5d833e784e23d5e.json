{"ast":null,"code":"var _jsxFileName = \"/Users/hasaniqbal/Desktop/React_Chat/react_chat/src/contexts/ConversationsProvider.js\";\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/hasaniqbal/Desktop/React_Chat/react_chat/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversations","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","recipient","contact","find","id","name","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,MAAMC,oBAAoB,GAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACH;AAED,OAAO,SAASG,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAChD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AACA,QAAM;AAAES,IAAAA;AAAF,MAAeR,WAAW,EAAhC;;AAEA,WAASS,kBAAT,CAA4BC,UAA5B,EAAwC;AACpCH,IAAAA,gBAAgB,CAACI,iBAAiB,IAAI;AAClC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAC;AAAvB,OAAvB,CAAP;AACH,KAFe,CAAhB;AAGH;;AAED,QAAMC,sBAAsB,GAAGP,aAAa,CAACQ,GAAd,CAAkBC,YAAY,IAAI;AAC7D,UAAML,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BE,SAAS,IAAI;AACxD,YAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAcD,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACE,EAAR,KAAaH,SAApB;AACH,OAFe,CAAhB;AAGA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAACG,QAAAA,EAAE,EAACH,SAAJ;AAAeI,QAAAA;AAAf,OAAP;AACH,KANkB,CAAnB;AAQA,WAAO,EAAE,GAAGL,YAAL;AAAmBL,MAAAA;AAAnB,KAAP;AACH,GAV8B,CAA/B;AAYA,QAAMW,KAAK,GAAG;AACVf,IAAAA,aAAa,EAAEO,sBADL;AAEVJ,IAAAA;AAFU,GAAd;AAKA,sBACI,oBAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAIY,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,QADL,CADJ;AAKH","sourcesContent":["import React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ children }) {\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\n    const { contacts } = useContacts()\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages:[] }]\n        })\n    }\n\n    const formattedConversations = conversations.map(conversation => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id===recipient\n            })\n            const name = (contact && contact.name) || recipient\n            return {id:recipient, name}\n        })\n\n        return { ...conversation, recipients }\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        createConversation\n    }\n\n    return (\n        <ConversationsContext.Provider value = {value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}