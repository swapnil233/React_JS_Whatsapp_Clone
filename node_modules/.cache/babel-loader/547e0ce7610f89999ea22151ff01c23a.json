{"ast":null,"code":"var _jsxFileName = \"/Users/hasaniqbal/Desktop/React_Chat/react_chat/src/contexts/ConversationsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n\n      if (madeChange) {} else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/hasaniqbal/Desktop/React_Chat/react_chat/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","sendMessage","formattedConversations","map","conversation","index","recipient","contact","find","name","selected","value","selectedConversation","selectConversationIndex"],"mappings":"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","sourcesContent":["import React, {useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n    const { contacts } = useContacts()\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages:[] }]\n        })\n    }\n\n    function addMessageToConversation({ recipients, text, sender }) {\n        setConversations(prevConversations => {\n            let madeChange = false\n            const newMessage = { sender, text }\n\n            if (madeChange) {\n\n            } else {\n                return [...prevConversations,\n                    { recipients, messages: [newMessage] }]\n            }\n        })\n    }\n\n    function sendMessage(recipients, text) {\n        addMessageToConversation({recipients, text, id})\n    }\n\n    const formattedConversations = conversations.map((conversation, index) => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id===recipient\n            })\n            const name = (contact && contact.name) || recipient\n            return {id:recipient, name}\n        })\n        const selected = index===selectedConversationIndex\n        return { ...conversation, recipients, selected }\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation\n    }\n\n    return (\n        <ConversationsContext.Provider value = {value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}